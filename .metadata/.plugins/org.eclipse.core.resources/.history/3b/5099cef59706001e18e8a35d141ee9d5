package com.bit.springboard.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.bit.springboard.dto.UserDTO;
import com.bit.springboard.service.user.UserService;

//클래스 자체를 @RequestMapping으로 설정하면 폴더 구조로 요청을 지정할 수 있다.
//UserController의 요청을 호출할 때는 /user/login.do
@Controller
@RequestMapping("/user")
public class UserController {
	@Autowired
	private UserService userService;
	
	//회원가입 페이지로 이동
	@GetMapping("/join.do")
	public String joinView() {
		//WEB-INF/views/user/join.jsp로 이동함.
		return "user/join";
	}
	
	//로그인 페이지로이동
	@GetMapping("/login.do")
	public String loginView(){
		//WEB-INF/views/user/login.jsp로 이동함
		return "user/login";
	}
	
	//화면단에서 전송한 데이터 받기
	//회원가입 진행
	@PostMapping("/join.do")
	public String join(UserDTO userDTO) {
		//회원가입 처리
		userService.join(userDTO);
		return "user/login";		
	}
	
	//로그인 처리
		@PostMapping("/login.do")
		public String login(UserDTO userDTO, Model model,
				HttpSession session) {
			//아이디가 존재하는 유저인지
			int idCheck = userService.idCheck(userDTO.getUserId());
			
			//아이디가 존재하지 않을때
			if(idCheck < 1) {
				model.addAttribute("message", "idNotExist");
				
				return "user/login";
			} 
			//아이디가 존재할 때
			else {
				//아이디와 비번 모두 비교
				UserDTO loginUser = userService.login(userDTO);
				
				//비번이 틀렸을 때
				if(loginUser == null) {
					model.addAttribute("message", "wrongPw");
					
					return "user/login";
				}
				
				//로그인되면 session에 사용자정보 저장
				//UserDTO 형태로 session에 저장
				session.setAttribute("loginUser", loginUser);
			}
			
			return "redirect:/index.jsp";
		}
	
	@GetMapping("/logout.do")
	public String logout(HttpSession session) {
		//세션 강제 만료
		//세션에 저장되어 있는 정보들도 다 삭제된다.
		session.invalidate();
		return "redirect:/index.jsp";
	}
	
	@PostMapping("/idCheck.do")
	//String을 리턴하면 ViewResolver를 타서 해당 화면을 찾아서 
	//Response 바디에 HTML 화면을 리턴
	//화면에서 리턴되는 값만 받아서 쓰고 싶을 때는 리턴값을 Response 바디에 넣어서 리턴
	//@ResponseBody 어노테이션을 사용하여 리턴값을 Response 바디에 담아서 전송한다.
	//				viewResolver도 실행되지 않는다.
	@ResponseBody
	public String idCheck(UserDTO userDTO) {
		int idCheck = userService.idCheck(userDTO.getUserId());
		
		//중복된 아이디일때
		if(idCheck > 0) {
			return "duplicatedId";
		}
		//중복되지 않은 아이디일때
		return "idOk";
	}
	
	//json형태의 데이터 만들어서 리턴
	//자주 사용되는 방식1: jsonView
	//자주 사용되는 방식2: objectMapper
	//Objectmapper 객체 사용해서 json 형태의 데이터 리턴
	ObjectMapper mapper = new Objectmapper();
	
}
