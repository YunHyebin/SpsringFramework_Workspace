/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-06-14 06:42:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insertBoard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }/header.jsp", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("	<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center;\">\r\n");
      out.write("		<h3>새 글 등록</h3>\r\n");
      out.write("		<form id=\"insertForm\" action=\"/board/insertBoard.do\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("			<table border=\"1\" style=\"border-collapse: collapse\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td style=\"background: skyblue; width: 70px;\">\r\n");
      out.write("						제목\r\n");
      out.write("					</td>\r\n");
      out.write("					<td style=\"text-align: left;\">\r\n");
      out.write("						<input type=\"text\" name=\"boardTitle\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td style=\"background: skyblue;\">\r\n");
      out.write("						작성자\r\n");
      out.write("					</td>\r\n");
      out.write("					<td style=\"text-align: left;\">\r\n");
      out.write("						<input type=\"text\" name=\"boardWriter\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.userId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td style=\"background: skyblue; width: 70px;\">\r\n");
      out.write("						내용\r\n");
      out.write("					</td>\r\n");
      out.write("					<td style=\"text-align: left;\">\r\n");
      out.write("						<textarea name=\"boardContent\" cols=\"40\" rows=\"10\"></textarea>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td style=\"background: skyblue; width: 70px;\"> \r\n");
      out.write("						파일첨부\r\n");
      out.write("					</td>\r\n");
      out.write("					<td>\r\n");
      out.write("						<div id=\"image_preview\">\r\n");
      out.write("							<input type=\"file\" id=\"btnAtt\" \r\n");
      out.write("							name=\"uploadFiles\" multiple>\r\n");
      out.write("							<div id=\"attZone\"\r\n");
      out.write("								data-placeholder=\"파일을 첨부하려면 파일선택 버튼을 누르세요.\">\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td colspan=\"2\" align=\"center\">\r\n");
      out.write("						<button type=\"submit\">새 글 등록</button>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("		<hr/>\r\n");
      out.write("		<a href=\"/board/getBoardList.do\">글 목록</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }/footer.jsp", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		//추가된 파일들을 담아줄 배열. File 객체들이 하나씩 저장\r\n");
      out.write("		const uploadFiles = [];\r\n");
      out.write("		\r\n");
      out.write("		$(function (){\r\n");
      out.write("			//input type=\"file\"이 변경되면 미리보기 동작\r\n");
      out.write("			$(\"#btnAtt\")on(\"change\", (e) => {\r\n");
      out.write("				//input에 추가된 파일을 변수로 받기\r\n");
      out.write("				const files = e.target.files;\r\n");
      out.write("				\r\n");
      out.write("				//변수로 받아온 파일들 배열로 변환\r\n");
      out.write("				const fileArr = Array.prototype.slice.call(files);\r\n");
      out.write("				\r\n");
      out.write("				//파일 배열에 담긴 파일들 하나씩 꺼내서 미리보기 처리\r\n");
      out.write("				for(f of fileArr){\r\n");
      out.write("					//미리보기 메소드 호출\r\n");
      out.write("					imageLoader(f);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$(\"#insertForm\").on(\"submit\", () => {\r\n");
      out.write("				//폼 submit 전에 마지막으로 uploadFiles에 있는 파일들을 \r\n");
      out.write("				//input type=\"file\"에 담아준다\r\n");
      out.write("				dt = new DataTransfer();\r\n");
      out.write("				\r\n");
      out.write("				for(f in uploadFiles){\r\n");
      out.write("					const file = uploadFiles[f];\r\n");
      out.write("					dt.items.add(file);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				$(\"#btnAtt\").files = dt.files;\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//미리보기 메소드\r\n");
      out.write("		//미리보기 영역에 들어갈 img태그 생성 및 선택된 파일을 \r\n");
      out.write("		//Base 64 인코딩된 문자열 형태로 변환하여 미리보기 구현\r\n");
      out.write("		const imageLoader = (file) => {\r\n");
      out.write("			//첨부파일 배열에 추가\r\n");
      out.write("			uploadFiles.push(file);\r\n");
      out.write("			\r\n");
      out.write("			const reader = new FileReader();\r\n");
      out.write("			\r\n");
      out.write("			reader.onload = (e) => {\r\n");
      out.write("				//이미지 표출할 img 태그 생성\r\n");
      out.write("				let img = document.createElement(\"img\");\r\n");
      out.write("				img.setAttribute(\"style\", \"width: 100%; height: 100%; z-index: none;\");\r\n");
      out.write("				\r\n");
      out.write("				//이미지 파일인지 아닌지 체크\r\n");
      out.write("				if(file.name.toLowerCase().match(/(.*?)\\.(jpg|jpeg|png|gif|svg|bmp)$/)){\r\n");
      out.write("					img.src = e.target.result;\r\n");
      out.write("				}else{\r\n");
      out.write("					img.src = 'images/defaultFileImg.png';\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				//미리보기 영역에 추가\r\n");
      out.write("				//미리보기 이미지 태그와 삭제 버튼 그리고 파일명을 표출하는 p태그\r\n");
      out.write("				//묶어주는 div를 만들어서 미리보기 영역에 추가\r\n");
      out.write("				$(\"#attZone\").append(makeDiv(img, file));\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//파일을 BASE 64 인코딩 문자열로 변경\r\n");
      out.write("			reader.readAsDataURL(file);	\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//미리보기 영역에 들어갈 div 생성하는 메소드\r\n");
      out.write("		const makeDiv = (img, file) => {\r\n");
      out.write("			//div 태그 생성\r\n");
      out.write("			let div = document.createElement(\"div\");\r\n");
      out.write("			//style 적용\r\n");
      out.write("			div.setAttribute(\"style\", \"display: inline-block;\" \r\n");
      out.write("			+ \" position: relative;\"\r\n");
      out.write("			+ \" width: 150px; height: 120px;\"\r\n");
      out.write("			+ \" margin: 5px; border: 1px solid #00f; z-index: 1;\");\r\n");
      out.write("			\r\n");
      out.write("			//잘못 올렸을 경우 삭제할 수 있는 버튼 생성\r\n");
      out.write("			let btn = document.createElement(\"input\");\r\n");
      out.write("			btn.setAttribute(\"type\", \"button\");\r\n");
      out.write("			btn.setAttribute(\"value\", \"x\");\r\n");
      out.write("			btn.setAttribute(\"delFile\", file.name);\r\n");
      out.write("			btn.setAttribute(\"style\", \"width: 30px; height: 30px;\"\r\n");
      out.write("			+ \" position: absolute; right: 0px; bottom: 0px;\"\r\n");
      out.write("			+ \" z-index: 999; background-color: rgba(255, 255, 255, 0.1);\"\r\n");
      out.write("			+ \" color: #f00;\");\r\n");
      out.write("			\r\n");
      out.write("			//버튼 이벤트 생성\r\n");
      out.write("			//버튼 클릭하면 해당 파일 삭제 기능 구현\r\n");
      out.write("			btn.onclick = (e) => {\r\n");
      out.write("				//클릭된 버튼\r\n");
      out.write("				const ele = e.srcElement;\r\n");
      out.write("				\r\n");
      out.write("				const delFile = ele.getAttribute(\"delFile\");\r\n");
      out.write("				\r\n");
      out.write("				for(let i = 0; i < uploadFiles.length; i++){\r\n");
      out.write("					//배열에 담겨있는 파일 중 파일명이 같은 파일 삭제\r\n");
      out.write("					if(delFile === uploadFiles[i].name){\r\n");
      out.write("						//배열에서 i번째 하나 제거\r\n");
      out.write("						uploadFiles.splice(i, 1);\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("				//버튼 클릭 시 btnAtt 인풋에서도 첨부된 파일 삭제\r\n");
      out.write("				//input type=\"file\"은 첨부된 파일을 fileList의 형태로 관리하고 있다.\r\n");
      out.write("				//fileList에는 일반적인 File객체를 넣을 수 없다.\r\n");
      out.write("				//DataTransfer라는 클래스를 이용해서 완전한 fileList 형태로 만들어서 \r\n");
      out.write("				//input.files에 넣어야 한다.\r\n");
      out.write("				dt = new DataTransfer();\r\n");
      out.write("				for(f in uploadFiles){\r\n");
      out.write("					const file = uploadFiles[f];\r\n");
      out.write("					dt.items.add(file);\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				$(\"#btnAtt\")[0].files = dt.files;\r\n");
      out.write("				\r\n");
      out.write("				//해당 img 태그를 담고있는 div 태그 삭제\r\n");
      out.write("				const parentDiv = ele.parentNode;\r\n");
      out.write("				$(parentDiv).remove();\r\n");
      out.write("			}\r\n");
      out.write("			//파일명 표출할 p 태그 생성\r\n");
      out.write("			const fName = document.createElement(\"p\");\r\n");
      out.write("			fName.setAttribute(\"style\", \"display: inline-block; font-size: 8px;\");\r\n");
      out.write("			fName.textContent = file.name;\r\n");
      out.write("			\r\n");
      out.write("			//div에 하나씩 추가\r\n");
      out.write("			div.appendChild(img);\r\n");
      out.write("			div.appendChild(btn);\r\n");
      out.write("			div.appendChild(fName);\r\n");
      out.write("			\r\n");
      out.write("			//완성된 div 리턴\r\n");
      out.write("			return div;\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
